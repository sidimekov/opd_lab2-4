import {sendData} from "./data_manager.js";

document.addEventListener('DOMContentLoaded', () => {
    const pvkData = [
        { id: 253, name: 'Абстрактность' },
        { id: 301, name: 'Объем внимания' },
        { id: 245, name: 'Аналитичность' },
        { id: 246, name: 'Синтетичность' },
        { id: 282, name: 'Умственная работоспособность' },
        { id: 251, name: 'Предметность' },
        { id: 240, name: 'Способность к пространственному воображению' },
        { id: 241, name: 'Способность к воссозданию образа по словесному описанию' },
        { id: 244, name: 'Способность к образному представлению предметов, процессов и явлений' },
        { id: 249, name: 'Креативность' },
        { id: 215, name: 'Способность аргументировано отстаивать свое мнение' },
        { id: 254, name: 'Вербальность' },
        { id: 260, name: 'Зрительная долговременная память на слова и фразы' }
    ];

    const stats = [
        'Простые визуальные сигналы - Успешные попытки',
        'Простые визуальные сигналы - Ср. время ус. Попыток',
        'Простые звуковые сигналы - Успешные попытки',
        'Простые звуковые сигналы - Ср. время ус. Попыток',
        'Сложные цветные сигналы - Успешные попытки',
        'Сложные цветные сигналы - Ошибки',
        'Сложные цветные сигналы - Ср. время ус. Попыток',
        'Сл. Цифровые визуальные сигналы - Успешные попытки',
        'Сл. Цифровые визуальные сигналы - Ср. время ус. Попыток',
        'Сл. Цифровые звуковые сигналы - Успешные попытки',
        'Сл. Цифровые звуковые сигналы - Ср. время ус. Попыток',
        'Простая РДО - Успешные попытки',
        'Простая РДО - Ср. время с учетом знака',
        'Простая РДО - Ст. отклонение с учетом знака',
        'Простая РДО - Ср. время без учета знака',
        'Простая РДО - Ст. отклонение без учета знака',
        'Сложная РДО - Успешные попытки',
        'Сложная РДО - Ср. время с учетом знака',
        'Сложная РДО - Ст. отклонение с учетом знака',
        'Сложная РДО - Ср. время без учета знака',
        'Сложная РДО - Ст. отклонение без учета знака',
        'Аналоговое слежение - Среднее время',
        'Аналоговое преследование - Среднее время реакции',
        'Аналоговое преследование - Макс. Время пересечения',
        'Распределение внимания - Среднее время ус. попыток',
        'Распределение внимания - Ст. отклонение',
        'Устойчивость внимания - Ошибки',
        'Устойчивость внимания - Точность',
        'Устойчивость внимания - Ср. время реакции',
        'Устойчивость внимания - Ст. отклонение времени реакции',
        'Звуковая кратковременная память - Точность',
        'Звуковая кратковременная память - Ср. время реакции',
        'Звуковая кратковременная память - Ст. отклонение времени реакции',
        'Мгновенная визуальная память - Точность',
        'Мгновенная визуальная память - Время реакции',
        'Аналитическое мышление - Точность',
        'Аналитическое мышление - Ср. время реакции',
        'Аналитическое мышление - Ст. отклонение времени реакции',
        'Индуктивное мышление - Точность',
        'Индуктивное мышление - Ср. время реакции',
        'Индуктивное мышление - Ст. отклонение времени реакции',
        'Абстракционное мышление - Точность',
        'Абстракционное мышление - Ср. время реакции',
        'Абстракционное мышление - Ст. отклонение времени реакции'
    ];

    const pvkContainer = document.getElementById('pvk-container');

    pvkData.forEach(pvk => {
        const pvkItem = document.createElement('div');
        pvkItem.className = 'pvk-item';
        pvkItem.innerHTML = `
            <h3>${pvk.name}</h3>
            <button onclick="addStat(${pvk.id})">Добавить Статистику</button>
            <div id="stat-list-${pvk.id}"></div>
        `;
        pvkContainer.appendChild(pvkItem);
    });

    document.getElementById('save-button').addEventListener('click', () => {
        const weights = [];
        document.querySelectorAll('input[type="number"]').forEach(input => {
            if (input.value) {
                if (parseFloat(input.value) >= 0) {
                    weights.push({
                        piq_id: parseInt(input.getAttribute('data-pvk-id')),
                        test_id: getTestIdByStat(input.getAttribute('data-stat')),
                        stat_name: input.getAttribute('data-stat').split(' - ')[1].trim(),
                        weight: parseFloat(input.value)
                    });
                } else {
                    alert("Введите положительные веса!");
                }
            }
        });
        console.log(weights); // Здесь можно заменить на отправку данных на сервер
        let response = saveWeights(weights);
        console.log(response);
    });

    window.addStat = function(pvkId) {
        const statList = document.getElementById(`stat-list-${pvkId}`);
        const statContainer = document.createElement('div');
        statContainer.className = 'stat-container';
        const select = document.createElement('select');
        stats.forEach(stat => {
            const option = document.createElement('option');
            option.value = stat;
            option.text = stat;
            select.appendChild(option);
        });
        const input = document.createElement('input');
        input.type = 'number';
        input.min = 0;
        input.max = 100;
        input.step = 0.01;
        input.placeholder = 'Вес';
        input.setAttribute('data-pvk-id', pvkId);

        select.onchange = function() {
            const div = document.createElement('div');
            const statName = select.value;
            const deleteButton = document.createElement('button');
            deleteButton.addEventListener('click', () => statContainer.remove());
            deleteButton.innerHTML = "Удалить вес теста";
            deleteButton.className = "delete-button";
            input.setAttribute('data-stat', statName);
            statContainer.innerHTML = `<span>${statName}</span>`;
            div.appendChild(deleteButton);
            div.appendChild(input);
            statContainer.appendChild(div);
            statList.appendChild(statContainer);
        };

        statContainer.appendChild(select);
        statList.appendChild(statContainer);
    };

    function getTestIdByStat(stat) {
        const statToTestIdMap = {
            'Простые визуальные сигналы - Успешные попытки': 1,
            'Простые визуальные сигналы - Ср. время ус. Попыток': 1,
            'Простые звуковые сигналы - Успешные попытки': 2,
            'Простые звуковые сигналы - Ср. время ус. Попыток': 2,
            'Сложные цветные сигналы - Успешные попытки': 3,
            'Сложные цветные сигналы - Ошибки': 3,
            'Сложные цветные сигналы - Ср. время ус. Попыток': 3,
            'Сл. Цифровые визуальные сигналы - Успешные попытки': 4,
            'Сл. Цифровые визуальные сигналы - Ср. время ус. Попыток': 4,
            'Сл. Цифровые звуковые сигналы - Успешные попытки': 5,
            'Сл. Цифровые звуковые сигналы - Ср. время ус. Попыток': 5,
            'Простая РДО - Успешные попытки': 6,
            'Простая РДО - Ср. время с учетом знака': 6,
            'Простая РДО - Ст. отклонение с учетом знака': 6,
            'Простая РДО - Ср. время без учета знака': 6,
            'Простая РДО - Ст. отклонение без учета знака': 6,
            'Сложная РДО - Успешные попытки': 7,
            'Сложная РДО - Ср. время с учетом знака': 7,
            'Сложная РДО - Ст. отклонение с учетом знака': 7,
            'Сложная РДО - Ср. время без учета знака': 7,
            'Сложная РДО - Ст. отклонение без учета знака': 7,
            'Аналоговое слежение - Среднее время': 8,
            'Аналоговое преследование - Среднее время реакции': 9,
            'Аналоговое преследование - Макс. Время пересечения': 9,
            'Распределение внимания - Среднее время ус. попыток': 10,
            'Распределение внимания - Ст. отклонение': 10,
            'Устойчивость внимания - Ошибки': 11,
            'Устойчивость внимания - Точность': 11,
            'Устойчивость внимания - Ср. время реакции': 11,
            'Устойчивость внимания - Ст. отклонение времени реакции': 11,
            'Звуковая кратковременная память - Точность': 12,
            'Звуковая кратковременная память - Ср. время реакции': 12,
            'Звуковая кратковременная память - Ст. отклонение времени реакции': 12,
            'Мгновенная визуальная память - Точность': 13,
            'Мгновенная визуальная память - Время реакции': 13,
            'Аналитическое мышление - Точность': 14,
            'Аналитическое мышление - Ср. время реакции': 14,
            'Аналитическое мышление - Ст. отклонение времени реакции': 14,
            'Индуктивное мышление - Точность': 15,
            'Индуктивное мышление - Ср. время реакции': 15,
            'Индуктивное мышление - Ст. отклонение времени реакции': 15,
            'Абстракционное мышление - Точность': 16,
            'Абстракционное мышление - Ср. время реакции': 16,
            'Абстракционное мышление - Ст. отклонение времени реакции': 16
        };
        return statToTestIdMap[stat] || 0;
    }
});

function saveWeights(weights) {
    // отправка оценок на серв
    var formData = new FormData();
    formData.append('weights', weights);
    // этот метод sendData есть на серваке, локально работать не будет
    console.log(formData)
    var result = sendData(formData, '../../backend/requests/set_weights.php');
    console.log(result)
    return result.response;
}